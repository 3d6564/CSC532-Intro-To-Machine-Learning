{
  "message": "ValueError: in user code:\n\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:805 train_function  *\n        return step_function(self, iterator)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:795 step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:1259 run\n        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:2730 call_for_each_replica\n        return self._call_for_each_replica(fn, args, kwargs)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:3417 _call_for_each_replica\n        return fn(*args, **kwargs)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:788 run_step  **\n        outputs = model.train_step(data)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:756 train_step\n        y, y_pred, sample_weight, regularization_losses=self.losses)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\compile_utils.py:186 __call__\n        self.build(y_pred)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\compile_utils.py:139 build\n        self._losses = nest.map_structure(self._get_loss_object, self._losses)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\util\\nest.py:659 map_structure\n        structure[0], [func(*x) for x in entries],\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\util\\nest.py:659 <listcomp>\n        structure[0], [func(*x) for x in entries],\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\compile_utils.py:262 _get_loss_object\n        loss = losses_mod.get(loss)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\losses.py:1899 get\n        return deserialize(identifier)\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\losses.py:1858 deserialize\n        printable_module_name='loss function')\n    C:\\Users\\cory\\ANACON~1\\envs\\r\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py:378 deserialize_keras_object\n        'Unknown ' + printable_module_name + ': ' + object_name)\n\n    ValueError: Unknown loss function: rmse\n",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) \n        result <- py_to_r(result)\n    if (is.null(result)) \n        invisible(result)\n    else result\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = 50L, epochs = 30L, \n    verbose = 1L, callbacks = list(<environment>, <environment>), \n    validation_split = 0, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, validation_data = <environment>, \n    x = <environment>, y = <environment>)", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., train_data, train_labels, \n    batch_size = FLAGS$batch_size, epochs = FLAGS$epochs, validation_data = list(val_data, \n        val_labels))", "fit(., train_data, train_labels, batch_size = FLAGS$batch_size, \n    epochs = FLAGS$epochs, validation_data = list(val_data, val_labels))", "model %>% fit(train_data, train_labels, batch_size = FLAGS$batch_size, \n    epochs = FLAGS$epochs, validation_data = list(val_data, val_labels))", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"hitters_hyper.R\", flags = list(nodes = c(16, 32, \n    128), learning_rate = c(0.05, 0.01, 0.001), batch_size = c(50, \n    100), epochs = c(30), activation = c(\"relu\", \"sigmoid\", \"tanh\"), \n    optimizer = \"adam\"), sample = 0.02)"]
}
