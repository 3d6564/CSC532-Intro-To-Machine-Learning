{
  "message": "InvalidArgumentError:  logits and labels must have the same first dimension, got logits shape [500,46] and labels shape [23000]\n\t [[node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits (defined at \\keras\\engine\\training.py:1100) ]] [Op:__inference_train_function_18334]\n\nFunction call stack:\ntrain_function\n",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) \n        result <- py_to_r(result)\n    if (is.null(result)) \n        invisible(result)\n    else result\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = 500L, epochs = 100L, \n    verbose = 1L, callbacks = list(<environment>, <environment>), \n    validation_split = 0, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, validation_data = <environment>, \n    x = <environment>, y = <environment>)", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., train_data, train_labels, \n    epochs = FLAGS$epochs, batch_size = FLAGS$batch_size, validation_data = list(val_data, \n        val_labels))", "fit(., train_data, train_labels, epochs = FLAGS$epochs, batch_size = FLAGS$batch_size, \n    validation_data = list(val_data, val_labels))", "function_list[[k]](value)", "withVisible(function_list[[k]](value))", "freduce(value, `_function_list`)", "`_fseq`(`_lhs`)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))", "model %>% fit(train_data, train_labels, epochs = FLAGS$epochs, \n    batch_size = FLAGS$batch_size, validation_data = list(val_data, \n        val_labels))", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"reuters_hyper.R\", flags = list(nodes = c(64, 128, \n    392), learning_rate = c(0.05, 0.01, 0.001, 1e-04), batch_size = c(100, \n    200, 500, 1000), epochs = c(30, 50, 100), activation = c(\"relu\", \n    \"sigmoid\", \"tanh\")), sample = 0.02)"]
}
